/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DatabaseService_H
#define DatabaseService_H

#include <thrift/TDispatchProcessor.h>
#include "DatabaseService_types.h"

namespace nanolat { namespace thrift {

class DatabaseServiceIf {
 public:
  virtual ~DatabaseServiceIf() {}
  virtual void connect(ConnectReply& _return, const int32_t protocol_version, const std::string& tenant_id) = 0;
  virtual void disconnect(DefaultReply& _return, const Session& session) = 0;
  virtual void database_create(DefaultReply& _return, const Session& session, const std::string& db_name) = 0;
  virtual void database_drop(DefaultReply& _return, const Session& session, const std::string& db_name) = 0;
  virtual void database_use(DefaultReply& _return, const Session& session, const std::string& db_name) = 0;
  virtual void table_create(DefaultReply& _return, const Session& session, const std::string& table_name) = 0;
  virtual void table_drop(DefaultReply& _return, const Session& session, const std::string& table_name) = 0;
  virtual void table_stat(TableStatReply& _return, const Session& session, const std::string& table_name) = 0;
  virtual void table_put(DefaultReply& _return, const Session& session, const std::string& table_name, const std::string& key, const std::string& value) = 0;
  virtual void table_get_by_key(TableGetReply& _return, const Session& session, const std::string& table_name, const std::string& key) = 0;
  virtual void table_get_by_order(TableGetReply& _return, const Session& session, const std::string& table_name, const KeyOrder keyOrder) = 0;
  virtual void table_del(DefaultReply& _return, const Session& session, const std::string& table_name, const std::string& key) = 0;
  virtual void transaction_begin(DefaultReply& _return, const Session& session) = 0;
  virtual void transaction_abort(DefaultReply& _return, const Session& session) = 0;
  virtual void transaction_commit(DefaultReply& _return, const Session& session) = 0;
  virtual void cursor_open_by_key(CursorOpenReply& _return, const Session& session, const std::string& table_name, const CursorDirection::type dir, const std::string& key) = 0;
  virtual void cursor_open_by_order(CursorOpenReply& _return, const Session& session, const std::string& table_name, const CursorDirection::type dir, const KeyOrder keyOrder) = 0;
  virtual void cursor_fetch(CursorFetchReply& _return, const Session& session, const CursorHandle cursor_handle) = 0;
  virtual void cursor_close(DefaultReply& _return, const Session& session, const CursorHandle cursor_handle) = 0;
};

class DatabaseServiceIfFactory {
 public:
  typedef DatabaseServiceIf Handler;

  virtual ~DatabaseServiceIfFactory() {}

  virtual DatabaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DatabaseServiceIf* /* handler */) = 0;
};

class DatabaseServiceIfSingletonFactory : virtual public DatabaseServiceIfFactory {
 public:
  DatabaseServiceIfSingletonFactory(const boost::shared_ptr<DatabaseServiceIf>& iface) : iface_(iface) {}
  virtual ~DatabaseServiceIfSingletonFactory() {}

  virtual DatabaseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DatabaseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<DatabaseServiceIf> iface_;
};

class DatabaseServiceNull : virtual public DatabaseServiceIf {
 public:
  virtual ~DatabaseServiceNull() {}
  void connect(ConnectReply& /* _return */, const int32_t /* protocol_version */, const std::string& /* tenant_id */) {
    return;
  }
  void disconnect(DefaultReply& /* _return */, const Session& /* session */) {
    return;
  }
  void database_create(DefaultReply& /* _return */, const Session& /* session */, const std::string& /* db_name */) {
    return;
  }
  void database_drop(DefaultReply& /* _return */, const Session& /* session */, const std::string& /* db_name */) {
    return;
  }
  void database_use(DefaultReply& /* _return */, const Session& /* session */, const std::string& /* db_name */) {
    return;
  }
  void table_create(DefaultReply& /* _return */, const Session& /* session */, const std::string& /* table_name */) {
    return;
  }
  void table_drop(DefaultReply& /* _return */, const Session& /* session */, const std::string& /* table_name */) {
    return;
  }
  void table_stat(TableStatReply& /* _return */, const Session& /* session */, const std::string& /* table_name */) {
    return;
  }
  void table_put(DefaultReply& /* _return */, const Session& /* session */, const std::string& /* table_name */, const std::string& /* key */, const std::string& /* value */) {
    return;
  }
  void table_get_by_key(TableGetReply& /* _return */, const Session& /* session */, const std::string& /* table_name */, const std::string& /* key */) {
    return;
  }
  void table_get_by_order(TableGetReply& /* _return */, const Session& /* session */, const std::string& /* table_name */, const KeyOrder /* keyOrder */) {
    return;
  }
  void table_del(DefaultReply& /* _return */, const Session& /* session */, const std::string& /* table_name */, const std::string& /* key */) {
    return;
  }
  void transaction_begin(DefaultReply& /* _return */, const Session& /* session */) {
    return;
  }
  void transaction_abort(DefaultReply& /* _return */, const Session& /* session */) {
    return;
  }
  void transaction_commit(DefaultReply& /* _return */, const Session& /* session */) {
    return;
  }
  void cursor_open_by_key(CursorOpenReply& /* _return */, const Session& /* session */, const std::string& /* table_name */, const CursorDirection::type /* dir */, const std::string& /* key */) {
    return;
  }
  void cursor_open_by_order(CursorOpenReply& /* _return */, const Session& /* session */, const std::string& /* table_name */, const CursorDirection::type /* dir */, const KeyOrder /* keyOrder */) {
    return;
  }
  void cursor_fetch(CursorFetchReply& /* _return */, const Session& /* session */, const CursorHandle /* cursor_handle */) {
    return;
  }
  void cursor_close(DefaultReply& /* _return */, const Session& /* session */, const CursorHandle /* cursor_handle */) {
    return;
  }
};

typedef struct _DatabaseService_connect_args__isset {
  _DatabaseService_connect_args__isset() : protocol_version(false), tenant_id(false) {}
  bool protocol_version;
  bool tenant_id;
} _DatabaseService_connect_args__isset;

class DatabaseService_connect_args {
 public:

  DatabaseService_connect_args() : protocol_version(0), tenant_id() {
  }

  virtual ~DatabaseService_connect_args() throw() {}

  int32_t protocol_version;
  std::string tenant_id;

  _DatabaseService_connect_args__isset __isset;

  void __set_protocol_version(const int32_t val) {
    protocol_version = val;
  }

  void __set_tenant_id(const std::string& val) {
    tenant_id = val;
  }

  bool operator == (const DatabaseService_connect_args & rhs) const
  {
    if (!(protocol_version == rhs.protocol_version))
      return false;
    if (!(tenant_id == rhs.tenant_id))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_connect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_connect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_connect_pargs {
 public:


  virtual ~DatabaseService_connect_pargs() throw() {}

  const int32_t* protocol_version;
  const std::string* tenant_id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_connect_result__isset {
  _DatabaseService_connect_result__isset() : success(false) {}
  bool success;
} _DatabaseService_connect_result__isset;

class DatabaseService_connect_result {
 public:

  DatabaseService_connect_result() {
  }

  virtual ~DatabaseService_connect_result() throw() {}

  ConnectReply success;

  _DatabaseService_connect_result__isset __isset;

  void __set_success(const ConnectReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_connect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_connect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_connect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_connect_presult__isset {
  _DatabaseService_connect_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_connect_presult__isset;

class DatabaseService_connect_presult {
 public:


  virtual ~DatabaseService_connect_presult() throw() {}

  ConnectReply* success;

  _DatabaseService_connect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_disconnect_args__isset {
  _DatabaseService_disconnect_args__isset() : session(false) {}
  bool session;
} _DatabaseService_disconnect_args__isset;

class DatabaseService_disconnect_args {
 public:

  DatabaseService_disconnect_args() {
  }

  virtual ~DatabaseService_disconnect_args() throw() {}

  Session session;

  _DatabaseService_disconnect_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  bool operator == (const DatabaseService_disconnect_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_disconnect_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_disconnect_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_disconnect_pargs {
 public:


  virtual ~DatabaseService_disconnect_pargs() throw() {}

  const Session* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_disconnect_result__isset {
  _DatabaseService_disconnect_result__isset() : success(false) {}
  bool success;
} _DatabaseService_disconnect_result__isset;

class DatabaseService_disconnect_result {
 public:

  DatabaseService_disconnect_result() {
  }

  virtual ~DatabaseService_disconnect_result() throw() {}

  DefaultReply success;

  _DatabaseService_disconnect_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_disconnect_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_disconnect_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_disconnect_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_disconnect_presult__isset {
  _DatabaseService_disconnect_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_disconnect_presult__isset;

class DatabaseService_disconnect_presult {
 public:


  virtual ~DatabaseService_disconnect_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_disconnect_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_database_create_args__isset {
  _DatabaseService_database_create_args__isset() : session(false), db_name(false) {}
  bool session;
  bool db_name;
} _DatabaseService_database_create_args__isset;

class DatabaseService_database_create_args {
 public:

  DatabaseService_database_create_args() : db_name() {
  }

  virtual ~DatabaseService_database_create_args() throw() {}

  Session session;
  std::string db_name;

  _DatabaseService_database_create_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_db_name(const std::string& val) {
    db_name = val;
  }

  bool operator == (const DatabaseService_database_create_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_name == rhs.db_name))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_database_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_database_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_database_create_pargs {
 public:


  virtual ~DatabaseService_database_create_pargs() throw() {}

  const Session* session;
  const std::string* db_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_database_create_result__isset {
  _DatabaseService_database_create_result__isset() : success(false) {}
  bool success;
} _DatabaseService_database_create_result__isset;

class DatabaseService_database_create_result {
 public:

  DatabaseService_database_create_result() {
  }

  virtual ~DatabaseService_database_create_result() throw() {}

  DefaultReply success;

  _DatabaseService_database_create_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_database_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_database_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_database_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_database_create_presult__isset {
  _DatabaseService_database_create_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_database_create_presult__isset;

class DatabaseService_database_create_presult {
 public:


  virtual ~DatabaseService_database_create_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_database_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_database_drop_args__isset {
  _DatabaseService_database_drop_args__isset() : session(false), db_name(false) {}
  bool session;
  bool db_name;
} _DatabaseService_database_drop_args__isset;

class DatabaseService_database_drop_args {
 public:

  DatabaseService_database_drop_args() : db_name() {
  }

  virtual ~DatabaseService_database_drop_args() throw() {}

  Session session;
  std::string db_name;

  _DatabaseService_database_drop_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_db_name(const std::string& val) {
    db_name = val;
  }

  bool operator == (const DatabaseService_database_drop_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_name == rhs.db_name))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_database_drop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_database_drop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_database_drop_pargs {
 public:


  virtual ~DatabaseService_database_drop_pargs() throw() {}

  const Session* session;
  const std::string* db_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_database_drop_result__isset {
  _DatabaseService_database_drop_result__isset() : success(false) {}
  bool success;
} _DatabaseService_database_drop_result__isset;

class DatabaseService_database_drop_result {
 public:

  DatabaseService_database_drop_result() {
  }

  virtual ~DatabaseService_database_drop_result() throw() {}

  DefaultReply success;

  _DatabaseService_database_drop_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_database_drop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_database_drop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_database_drop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_database_drop_presult__isset {
  _DatabaseService_database_drop_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_database_drop_presult__isset;

class DatabaseService_database_drop_presult {
 public:


  virtual ~DatabaseService_database_drop_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_database_drop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_database_use_args__isset {
  _DatabaseService_database_use_args__isset() : session(false), db_name(false) {}
  bool session;
  bool db_name;
} _DatabaseService_database_use_args__isset;

class DatabaseService_database_use_args {
 public:

  DatabaseService_database_use_args() : db_name() {
  }

  virtual ~DatabaseService_database_use_args() throw() {}

  Session session;
  std::string db_name;

  _DatabaseService_database_use_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_db_name(const std::string& val) {
    db_name = val;
  }

  bool operator == (const DatabaseService_database_use_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(db_name == rhs.db_name))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_database_use_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_database_use_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_database_use_pargs {
 public:


  virtual ~DatabaseService_database_use_pargs() throw() {}

  const Session* session;
  const std::string* db_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_database_use_result__isset {
  _DatabaseService_database_use_result__isset() : success(false) {}
  bool success;
} _DatabaseService_database_use_result__isset;

class DatabaseService_database_use_result {
 public:

  DatabaseService_database_use_result() {
  }

  virtual ~DatabaseService_database_use_result() throw() {}

  DefaultReply success;

  _DatabaseService_database_use_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_database_use_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_database_use_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_database_use_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_database_use_presult__isset {
  _DatabaseService_database_use_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_database_use_presult__isset;

class DatabaseService_database_use_presult {
 public:


  virtual ~DatabaseService_database_use_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_database_use_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_table_create_args__isset {
  _DatabaseService_table_create_args__isset() : session(false), table_name(false) {}
  bool session;
  bool table_name;
} _DatabaseService_table_create_args__isset;

class DatabaseService_table_create_args {
 public:

  DatabaseService_table_create_args() : table_name() {
  }

  virtual ~DatabaseService_table_create_args() throw() {}

  Session session;
  std::string table_name;

  _DatabaseService_table_create_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  bool operator == (const DatabaseService_table_create_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_create_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_create_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_table_create_pargs {
 public:


  virtual ~DatabaseService_table_create_pargs() throw() {}

  const Session* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_create_result__isset {
  _DatabaseService_table_create_result__isset() : success(false) {}
  bool success;
} _DatabaseService_table_create_result__isset;

class DatabaseService_table_create_result {
 public:

  DatabaseService_table_create_result() {
  }

  virtual ~DatabaseService_table_create_result() throw() {}

  DefaultReply success;

  _DatabaseService_table_create_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_table_create_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_create_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_create_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_create_presult__isset {
  _DatabaseService_table_create_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_table_create_presult__isset;

class DatabaseService_table_create_presult {
 public:


  virtual ~DatabaseService_table_create_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_table_create_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_table_drop_args__isset {
  _DatabaseService_table_drop_args__isset() : session(false), table_name(false) {}
  bool session;
  bool table_name;
} _DatabaseService_table_drop_args__isset;

class DatabaseService_table_drop_args {
 public:

  DatabaseService_table_drop_args() : table_name() {
  }

  virtual ~DatabaseService_table_drop_args() throw() {}

  Session session;
  std::string table_name;

  _DatabaseService_table_drop_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  bool operator == (const DatabaseService_table_drop_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_drop_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_drop_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_table_drop_pargs {
 public:


  virtual ~DatabaseService_table_drop_pargs() throw() {}

  const Session* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_drop_result__isset {
  _DatabaseService_table_drop_result__isset() : success(false) {}
  bool success;
} _DatabaseService_table_drop_result__isset;

class DatabaseService_table_drop_result {
 public:

  DatabaseService_table_drop_result() {
  }

  virtual ~DatabaseService_table_drop_result() throw() {}

  DefaultReply success;

  _DatabaseService_table_drop_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_table_drop_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_drop_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_drop_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_drop_presult__isset {
  _DatabaseService_table_drop_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_table_drop_presult__isset;

class DatabaseService_table_drop_presult {
 public:


  virtual ~DatabaseService_table_drop_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_table_drop_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_table_stat_args__isset {
  _DatabaseService_table_stat_args__isset() : session(false), table_name(false) {}
  bool session;
  bool table_name;
} _DatabaseService_table_stat_args__isset;

class DatabaseService_table_stat_args {
 public:

  DatabaseService_table_stat_args() : table_name() {
  }

  virtual ~DatabaseService_table_stat_args() throw() {}

  Session session;
  std::string table_name;

  _DatabaseService_table_stat_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  bool operator == (const DatabaseService_table_stat_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_stat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_stat_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_table_stat_pargs {
 public:


  virtual ~DatabaseService_table_stat_pargs() throw() {}

  const Session* session;
  const std::string* table_name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_stat_result__isset {
  _DatabaseService_table_stat_result__isset() : success(false) {}
  bool success;
} _DatabaseService_table_stat_result__isset;

class DatabaseService_table_stat_result {
 public:

  DatabaseService_table_stat_result() {
  }

  virtual ~DatabaseService_table_stat_result() throw() {}

  TableStatReply success;

  _DatabaseService_table_stat_result__isset __isset;

  void __set_success(const TableStatReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_table_stat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_stat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_stat_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_stat_presult__isset {
  _DatabaseService_table_stat_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_table_stat_presult__isset;

class DatabaseService_table_stat_presult {
 public:


  virtual ~DatabaseService_table_stat_presult() throw() {}

  TableStatReply* success;

  _DatabaseService_table_stat_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_table_put_args__isset {
  _DatabaseService_table_put_args__isset() : session(false), table_name(false), key(false), value(false) {}
  bool session;
  bool table_name;
  bool key;
  bool value;
} _DatabaseService_table_put_args__isset;

class DatabaseService_table_put_args {
 public:

  DatabaseService_table_put_args() : table_name(), key(), value() {
  }

  virtual ~DatabaseService_table_put_args() throw() {}

  Session session;
  std::string table_name;
  std::string key;
  std::string value;

  _DatabaseService_table_put_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  void __set_value(const std::string& val) {
    value = val;
  }

  bool operator == (const DatabaseService_table_put_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_put_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_table_put_pargs {
 public:


  virtual ~DatabaseService_table_put_pargs() throw() {}

  const Session* session;
  const std::string* table_name;
  const std::string* key;
  const std::string* value;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_put_result__isset {
  _DatabaseService_table_put_result__isset() : success(false) {}
  bool success;
} _DatabaseService_table_put_result__isset;

class DatabaseService_table_put_result {
 public:

  DatabaseService_table_put_result() {
  }

  virtual ~DatabaseService_table_put_result() throw() {}

  DefaultReply success;

  _DatabaseService_table_put_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_table_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_put_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_put_presult__isset {
  _DatabaseService_table_put_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_table_put_presult__isset;

class DatabaseService_table_put_presult {
 public:


  virtual ~DatabaseService_table_put_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_table_put_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_table_get_by_key_args__isset {
  _DatabaseService_table_get_by_key_args__isset() : session(false), table_name(false), key(false) {}
  bool session;
  bool table_name;
  bool key;
} _DatabaseService_table_get_by_key_args__isset;

class DatabaseService_table_get_by_key_args {
 public:

  DatabaseService_table_get_by_key_args() : table_name(), key() {
  }

  virtual ~DatabaseService_table_get_by_key_args() throw() {}

  Session session;
  std::string table_name;
  std::string key;

  _DatabaseService_table_get_by_key_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const DatabaseService_table_get_by_key_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_get_by_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_get_by_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_table_get_by_key_pargs {
 public:


  virtual ~DatabaseService_table_get_by_key_pargs() throw() {}

  const Session* session;
  const std::string* table_name;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_get_by_key_result__isset {
  _DatabaseService_table_get_by_key_result__isset() : success(false) {}
  bool success;
} _DatabaseService_table_get_by_key_result__isset;

class DatabaseService_table_get_by_key_result {
 public:

  DatabaseService_table_get_by_key_result() {
  }

  virtual ~DatabaseService_table_get_by_key_result() throw() {}

  TableGetReply success;

  _DatabaseService_table_get_by_key_result__isset __isset;

  void __set_success(const TableGetReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_table_get_by_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_get_by_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_get_by_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_get_by_key_presult__isset {
  _DatabaseService_table_get_by_key_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_table_get_by_key_presult__isset;

class DatabaseService_table_get_by_key_presult {
 public:


  virtual ~DatabaseService_table_get_by_key_presult() throw() {}

  TableGetReply* success;

  _DatabaseService_table_get_by_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_table_get_by_order_args__isset {
  _DatabaseService_table_get_by_order_args__isset() : session(false), table_name(false), keyOrder(false) {}
  bool session;
  bool table_name;
  bool keyOrder;
} _DatabaseService_table_get_by_order_args__isset;

class DatabaseService_table_get_by_order_args {
 public:

  DatabaseService_table_get_by_order_args() : table_name(), keyOrder(0) {
  }

  virtual ~DatabaseService_table_get_by_order_args() throw() {}

  Session session;
  std::string table_name;
  KeyOrder keyOrder;

  _DatabaseService_table_get_by_order_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  void __set_keyOrder(const KeyOrder val) {
    keyOrder = val;
  }

  bool operator == (const DatabaseService_table_get_by_order_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(keyOrder == rhs.keyOrder))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_get_by_order_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_get_by_order_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_table_get_by_order_pargs {
 public:


  virtual ~DatabaseService_table_get_by_order_pargs() throw() {}

  const Session* session;
  const std::string* table_name;
  const KeyOrder* keyOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_get_by_order_result__isset {
  _DatabaseService_table_get_by_order_result__isset() : success(false) {}
  bool success;
} _DatabaseService_table_get_by_order_result__isset;

class DatabaseService_table_get_by_order_result {
 public:

  DatabaseService_table_get_by_order_result() {
  }

  virtual ~DatabaseService_table_get_by_order_result() throw() {}

  TableGetReply success;

  _DatabaseService_table_get_by_order_result__isset __isset;

  void __set_success(const TableGetReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_table_get_by_order_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_get_by_order_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_get_by_order_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_get_by_order_presult__isset {
  _DatabaseService_table_get_by_order_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_table_get_by_order_presult__isset;

class DatabaseService_table_get_by_order_presult {
 public:


  virtual ~DatabaseService_table_get_by_order_presult() throw() {}

  TableGetReply* success;

  _DatabaseService_table_get_by_order_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_table_del_args__isset {
  _DatabaseService_table_del_args__isset() : session(false), table_name(false), key(false) {}
  bool session;
  bool table_name;
  bool key;
} _DatabaseService_table_del_args__isset;

class DatabaseService_table_del_args {
 public:

  DatabaseService_table_del_args() : table_name(), key() {
  }

  virtual ~DatabaseService_table_del_args() throw() {}

  Session session;
  std::string table_name;
  std::string key;

  _DatabaseService_table_del_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const DatabaseService_table_del_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_del_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_del_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_table_del_pargs {
 public:


  virtual ~DatabaseService_table_del_pargs() throw() {}

  const Session* session;
  const std::string* table_name;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_del_result__isset {
  _DatabaseService_table_del_result__isset() : success(false) {}
  bool success;
} _DatabaseService_table_del_result__isset;

class DatabaseService_table_del_result {
 public:

  DatabaseService_table_del_result() {
  }

  virtual ~DatabaseService_table_del_result() throw() {}

  DefaultReply success;

  _DatabaseService_table_del_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_table_del_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_table_del_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_table_del_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_table_del_presult__isset {
  _DatabaseService_table_del_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_table_del_presult__isset;

class DatabaseService_table_del_presult {
 public:


  virtual ~DatabaseService_table_del_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_table_del_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_transaction_begin_args__isset {
  _DatabaseService_transaction_begin_args__isset() : session(false) {}
  bool session;
} _DatabaseService_transaction_begin_args__isset;

class DatabaseService_transaction_begin_args {
 public:

  DatabaseService_transaction_begin_args() {
  }

  virtual ~DatabaseService_transaction_begin_args() throw() {}

  Session session;

  _DatabaseService_transaction_begin_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  bool operator == (const DatabaseService_transaction_begin_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_transaction_begin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_transaction_begin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_transaction_begin_pargs {
 public:


  virtual ~DatabaseService_transaction_begin_pargs() throw() {}

  const Session* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_transaction_begin_result__isset {
  _DatabaseService_transaction_begin_result__isset() : success(false) {}
  bool success;
} _DatabaseService_transaction_begin_result__isset;

class DatabaseService_transaction_begin_result {
 public:

  DatabaseService_transaction_begin_result() {
  }

  virtual ~DatabaseService_transaction_begin_result() throw() {}

  DefaultReply success;

  _DatabaseService_transaction_begin_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_transaction_begin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_transaction_begin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_transaction_begin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_transaction_begin_presult__isset {
  _DatabaseService_transaction_begin_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_transaction_begin_presult__isset;

class DatabaseService_transaction_begin_presult {
 public:


  virtual ~DatabaseService_transaction_begin_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_transaction_begin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_transaction_abort_args__isset {
  _DatabaseService_transaction_abort_args__isset() : session(false) {}
  bool session;
} _DatabaseService_transaction_abort_args__isset;

class DatabaseService_transaction_abort_args {
 public:

  DatabaseService_transaction_abort_args() {
  }

  virtual ~DatabaseService_transaction_abort_args() throw() {}

  Session session;

  _DatabaseService_transaction_abort_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  bool operator == (const DatabaseService_transaction_abort_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_transaction_abort_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_transaction_abort_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_transaction_abort_pargs {
 public:


  virtual ~DatabaseService_transaction_abort_pargs() throw() {}

  const Session* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_transaction_abort_result__isset {
  _DatabaseService_transaction_abort_result__isset() : success(false) {}
  bool success;
} _DatabaseService_transaction_abort_result__isset;

class DatabaseService_transaction_abort_result {
 public:

  DatabaseService_transaction_abort_result() {
  }

  virtual ~DatabaseService_transaction_abort_result() throw() {}

  DefaultReply success;

  _DatabaseService_transaction_abort_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_transaction_abort_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_transaction_abort_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_transaction_abort_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_transaction_abort_presult__isset {
  _DatabaseService_transaction_abort_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_transaction_abort_presult__isset;

class DatabaseService_transaction_abort_presult {
 public:


  virtual ~DatabaseService_transaction_abort_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_transaction_abort_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_transaction_commit_args__isset {
  _DatabaseService_transaction_commit_args__isset() : session(false) {}
  bool session;
} _DatabaseService_transaction_commit_args__isset;

class DatabaseService_transaction_commit_args {
 public:

  DatabaseService_transaction_commit_args() {
  }

  virtual ~DatabaseService_transaction_commit_args() throw() {}

  Session session;

  _DatabaseService_transaction_commit_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  bool operator == (const DatabaseService_transaction_commit_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_transaction_commit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_transaction_commit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_transaction_commit_pargs {
 public:


  virtual ~DatabaseService_transaction_commit_pargs() throw() {}

  const Session* session;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_transaction_commit_result__isset {
  _DatabaseService_transaction_commit_result__isset() : success(false) {}
  bool success;
} _DatabaseService_transaction_commit_result__isset;

class DatabaseService_transaction_commit_result {
 public:

  DatabaseService_transaction_commit_result() {
  }

  virtual ~DatabaseService_transaction_commit_result() throw() {}

  DefaultReply success;

  _DatabaseService_transaction_commit_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_transaction_commit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_transaction_commit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_transaction_commit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_transaction_commit_presult__isset {
  _DatabaseService_transaction_commit_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_transaction_commit_presult__isset;

class DatabaseService_transaction_commit_presult {
 public:


  virtual ~DatabaseService_transaction_commit_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_transaction_commit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_cursor_open_by_key_args__isset {
  _DatabaseService_cursor_open_by_key_args__isset() : session(false), table_name(false), dir(false), key(false) {}
  bool session;
  bool table_name;
  bool dir;
  bool key;
} _DatabaseService_cursor_open_by_key_args__isset;

class DatabaseService_cursor_open_by_key_args {
 public:

  DatabaseService_cursor_open_by_key_args() : table_name(), dir((CursorDirection::type)0), key() {
  }

  virtual ~DatabaseService_cursor_open_by_key_args() throw() {}

  Session session;
  std::string table_name;
  CursorDirection::type dir;
  std::string key;

  _DatabaseService_cursor_open_by_key_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  void __set_dir(const CursorDirection::type val) {
    dir = val;
  }

  void __set_key(const std::string& val) {
    key = val;
  }

  bool operator == (const DatabaseService_cursor_open_by_key_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_open_by_key_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_open_by_key_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_cursor_open_by_key_pargs {
 public:


  virtual ~DatabaseService_cursor_open_by_key_pargs() throw() {}

  const Session* session;
  const std::string* table_name;
  const CursorDirection::type* dir;
  const std::string* key;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_open_by_key_result__isset {
  _DatabaseService_cursor_open_by_key_result__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_open_by_key_result__isset;

class DatabaseService_cursor_open_by_key_result {
 public:

  DatabaseService_cursor_open_by_key_result() {
  }

  virtual ~DatabaseService_cursor_open_by_key_result() throw() {}

  CursorOpenReply success;

  _DatabaseService_cursor_open_by_key_result__isset __isset;

  void __set_success(const CursorOpenReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_cursor_open_by_key_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_open_by_key_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_open_by_key_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_open_by_key_presult__isset {
  _DatabaseService_cursor_open_by_key_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_open_by_key_presult__isset;

class DatabaseService_cursor_open_by_key_presult {
 public:


  virtual ~DatabaseService_cursor_open_by_key_presult() throw() {}

  CursorOpenReply* success;

  _DatabaseService_cursor_open_by_key_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_cursor_open_by_order_args__isset {
  _DatabaseService_cursor_open_by_order_args__isset() : session(false), table_name(false), dir(false), keyOrder(false) {}
  bool session;
  bool table_name;
  bool dir;
  bool keyOrder;
} _DatabaseService_cursor_open_by_order_args__isset;

class DatabaseService_cursor_open_by_order_args {
 public:

  DatabaseService_cursor_open_by_order_args() : table_name(), dir((CursorDirection::type)0), keyOrder(0) {
  }

  virtual ~DatabaseService_cursor_open_by_order_args() throw() {}

  Session session;
  std::string table_name;
  CursorDirection::type dir;
  KeyOrder keyOrder;

  _DatabaseService_cursor_open_by_order_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_table_name(const std::string& val) {
    table_name = val;
  }

  void __set_dir(const CursorDirection::type val) {
    dir = val;
  }

  void __set_keyOrder(const KeyOrder val) {
    keyOrder = val;
  }

  bool operator == (const DatabaseService_cursor_open_by_order_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(table_name == rhs.table_name))
      return false;
    if (!(dir == rhs.dir))
      return false;
    if (!(keyOrder == rhs.keyOrder))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_open_by_order_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_open_by_order_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_cursor_open_by_order_pargs {
 public:


  virtual ~DatabaseService_cursor_open_by_order_pargs() throw() {}

  const Session* session;
  const std::string* table_name;
  const CursorDirection::type* dir;
  const KeyOrder* keyOrder;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_open_by_order_result__isset {
  _DatabaseService_cursor_open_by_order_result__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_open_by_order_result__isset;

class DatabaseService_cursor_open_by_order_result {
 public:

  DatabaseService_cursor_open_by_order_result() {
  }

  virtual ~DatabaseService_cursor_open_by_order_result() throw() {}

  CursorOpenReply success;

  _DatabaseService_cursor_open_by_order_result__isset __isset;

  void __set_success(const CursorOpenReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_cursor_open_by_order_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_open_by_order_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_open_by_order_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_open_by_order_presult__isset {
  _DatabaseService_cursor_open_by_order_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_open_by_order_presult__isset;

class DatabaseService_cursor_open_by_order_presult {
 public:


  virtual ~DatabaseService_cursor_open_by_order_presult() throw() {}

  CursorOpenReply* success;

  _DatabaseService_cursor_open_by_order_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_cursor_fetch_args__isset {
  _DatabaseService_cursor_fetch_args__isset() : session(false), cursor_handle(false) {}
  bool session;
  bool cursor_handle;
} _DatabaseService_cursor_fetch_args__isset;

class DatabaseService_cursor_fetch_args {
 public:

  DatabaseService_cursor_fetch_args() : cursor_handle(0) {
  }

  virtual ~DatabaseService_cursor_fetch_args() throw() {}

  Session session;
  CursorHandle cursor_handle;

  _DatabaseService_cursor_fetch_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_cursor_handle(const CursorHandle val) {
    cursor_handle = val;
  }

  bool operator == (const DatabaseService_cursor_fetch_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(cursor_handle == rhs.cursor_handle))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_fetch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_fetch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_cursor_fetch_pargs {
 public:


  virtual ~DatabaseService_cursor_fetch_pargs() throw() {}

  const Session* session;
  const CursorHandle* cursor_handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_fetch_result__isset {
  _DatabaseService_cursor_fetch_result__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_fetch_result__isset;

class DatabaseService_cursor_fetch_result {
 public:

  DatabaseService_cursor_fetch_result() {
  }

  virtual ~DatabaseService_cursor_fetch_result() throw() {}

  CursorFetchReply success;

  _DatabaseService_cursor_fetch_result__isset __isset;

  void __set_success(const CursorFetchReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_cursor_fetch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_fetch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_fetch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_fetch_presult__isset {
  _DatabaseService_cursor_fetch_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_fetch_presult__isset;

class DatabaseService_cursor_fetch_presult {
 public:


  virtual ~DatabaseService_cursor_fetch_presult() throw() {}

  CursorFetchReply* success;

  _DatabaseService_cursor_fetch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DatabaseService_cursor_close_args__isset {
  _DatabaseService_cursor_close_args__isset() : session(false), cursor_handle(false) {}
  bool session;
  bool cursor_handle;
} _DatabaseService_cursor_close_args__isset;

class DatabaseService_cursor_close_args {
 public:

  DatabaseService_cursor_close_args() : cursor_handle(0) {
  }

  virtual ~DatabaseService_cursor_close_args() throw() {}

  Session session;
  CursorHandle cursor_handle;

  _DatabaseService_cursor_close_args__isset __isset;

  void __set_session(const Session& val) {
    session = val;
  }

  void __set_cursor_handle(const CursorHandle val) {
    cursor_handle = val;
  }

  bool operator == (const DatabaseService_cursor_close_args & rhs) const
  {
    if (!(session == rhs.session))
      return false;
    if (!(cursor_handle == rhs.cursor_handle))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_close_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_close_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DatabaseService_cursor_close_pargs {
 public:


  virtual ~DatabaseService_cursor_close_pargs() throw() {}

  const Session* session;
  const CursorHandle* cursor_handle;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_close_result__isset {
  _DatabaseService_cursor_close_result__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_close_result__isset;

class DatabaseService_cursor_close_result {
 public:

  DatabaseService_cursor_close_result() {
  }

  virtual ~DatabaseService_cursor_close_result() throw() {}

  DefaultReply success;

  _DatabaseService_cursor_close_result__isset __isset;

  void __set_success(const DefaultReply& val) {
    success = val;
  }

  bool operator == (const DatabaseService_cursor_close_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DatabaseService_cursor_close_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatabaseService_cursor_close_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DatabaseService_cursor_close_presult__isset {
  _DatabaseService_cursor_close_presult__isset() : success(false) {}
  bool success;
} _DatabaseService_cursor_close_presult__isset;

class DatabaseService_cursor_close_presult {
 public:


  virtual ~DatabaseService_cursor_close_presult() throw() {}

  DefaultReply* success;

  _DatabaseService_cursor_close_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DatabaseServiceClient : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DatabaseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void connect(ConnectReply& _return, const int32_t protocol_version, const std::string& tenant_id);
  void send_connect(const int32_t protocol_version, const std::string& tenant_id);
  void recv_connect(ConnectReply& _return);
  void disconnect(DefaultReply& _return, const Session& session);
  void send_disconnect(const Session& session);
  void recv_disconnect(DefaultReply& _return);
  void database_create(DefaultReply& _return, const Session& session, const std::string& db_name);
  void send_database_create(const Session& session, const std::string& db_name);
  void recv_database_create(DefaultReply& _return);
  void database_drop(DefaultReply& _return, const Session& session, const std::string& db_name);
  void send_database_drop(const Session& session, const std::string& db_name);
  void recv_database_drop(DefaultReply& _return);
  void database_use(DefaultReply& _return, const Session& session, const std::string& db_name);
  void send_database_use(const Session& session, const std::string& db_name);
  void recv_database_use(DefaultReply& _return);
  void table_create(DefaultReply& _return, const Session& session, const std::string& table_name);
  void send_table_create(const Session& session, const std::string& table_name);
  void recv_table_create(DefaultReply& _return);
  void table_drop(DefaultReply& _return, const Session& session, const std::string& table_name);
  void send_table_drop(const Session& session, const std::string& table_name);
  void recv_table_drop(DefaultReply& _return);
  void table_stat(TableStatReply& _return, const Session& session, const std::string& table_name);
  void send_table_stat(const Session& session, const std::string& table_name);
  void recv_table_stat(TableStatReply& _return);
  void table_put(DefaultReply& _return, const Session& session, const std::string& table_name, const std::string& key, const std::string& value);
  void send_table_put(const Session& session, const std::string& table_name, const std::string& key, const std::string& value);
  void recv_table_put(DefaultReply& _return);
  void table_get_by_key(TableGetReply& _return, const Session& session, const std::string& table_name, const std::string& key);
  void send_table_get_by_key(const Session& session, const std::string& table_name, const std::string& key);
  void recv_table_get_by_key(TableGetReply& _return);
  void table_get_by_order(TableGetReply& _return, const Session& session, const std::string& table_name, const KeyOrder keyOrder);
  void send_table_get_by_order(const Session& session, const std::string& table_name, const KeyOrder keyOrder);
  void recv_table_get_by_order(TableGetReply& _return);
  void table_del(DefaultReply& _return, const Session& session, const std::string& table_name, const std::string& key);
  void send_table_del(const Session& session, const std::string& table_name, const std::string& key);
  void recv_table_del(DefaultReply& _return);
  void transaction_begin(DefaultReply& _return, const Session& session);
  void send_transaction_begin(const Session& session);
  void recv_transaction_begin(DefaultReply& _return);
  void transaction_abort(DefaultReply& _return, const Session& session);
  void send_transaction_abort(const Session& session);
  void recv_transaction_abort(DefaultReply& _return);
  void transaction_commit(DefaultReply& _return, const Session& session);
  void send_transaction_commit(const Session& session);
  void recv_transaction_commit(DefaultReply& _return);
  void cursor_open_by_key(CursorOpenReply& _return, const Session& session, const std::string& table_name, const CursorDirection::type dir, const std::string& key);
  void send_cursor_open_by_key(const Session& session, const std::string& table_name, const CursorDirection::type dir, const std::string& key);
  void recv_cursor_open_by_key(CursorOpenReply& _return);
  void cursor_open_by_order(CursorOpenReply& _return, const Session& session, const std::string& table_name, const CursorDirection::type dir, const KeyOrder keyOrder);
  void send_cursor_open_by_order(const Session& session, const std::string& table_name, const CursorDirection::type dir, const KeyOrder keyOrder);
  void recv_cursor_open_by_order(CursorOpenReply& _return);
  void cursor_fetch(CursorFetchReply& _return, const Session& session, const CursorHandle cursor_handle);
  void send_cursor_fetch(const Session& session, const CursorHandle cursor_handle);
  void recv_cursor_fetch(CursorFetchReply& _return);
  void cursor_close(DefaultReply& _return, const Session& session, const CursorHandle cursor_handle);
  void send_cursor_close(const Session& session, const CursorHandle cursor_handle);
  void recv_cursor_close(DefaultReply& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DatabaseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DatabaseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DatabaseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_connect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_disconnect(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_database_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_database_drop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_database_use(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_table_create(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_table_drop(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_table_stat(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_table_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_table_get_by_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_table_get_by_order(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_table_del(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transaction_begin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transaction_abort(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transaction_commit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cursor_open_by_key(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cursor_open_by_order(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cursor_fetch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_cursor_close(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DatabaseServiceProcessor(boost::shared_ptr<DatabaseServiceIf> iface) :
    iface_(iface) {
    processMap_["connect"] = &DatabaseServiceProcessor::process_connect;
    processMap_["disconnect"] = &DatabaseServiceProcessor::process_disconnect;
    processMap_["database_create"] = &DatabaseServiceProcessor::process_database_create;
    processMap_["database_drop"] = &DatabaseServiceProcessor::process_database_drop;
    processMap_["database_use"] = &DatabaseServiceProcessor::process_database_use;
    processMap_["table_create"] = &DatabaseServiceProcessor::process_table_create;
    processMap_["table_drop"] = &DatabaseServiceProcessor::process_table_drop;
    processMap_["table_stat"] = &DatabaseServiceProcessor::process_table_stat;
    processMap_["table_put"] = &DatabaseServiceProcessor::process_table_put;
    processMap_["table_get_by_key"] = &DatabaseServiceProcessor::process_table_get_by_key;
    processMap_["table_get_by_order"] = &DatabaseServiceProcessor::process_table_get_by_order;
    processMap_["table_del"] = &DatabaseServiceProcessor::process_table_del;
    processMap_["transaction_begin"] = &DatabaseServiceProcessor::process_transaction_begin;
    processMap_["transaction_abort"] = &DatabaseServiceProcessor::process_transaction_abort;
    processMap_["transaction_commit"] = &DatabaseServiceProcessor::process_transaction_commit;
    processMap_["cursor_open_by_key"] = &DatabaseServiceProcessor::process_cursor_open_by_key;
    processMap_["cursor_open_by_order"] = &DatabaseServiceProcessor::process_cursor_open_by_order;
    processMap_["cursor_fetch"] = &DatabaseServiceProcessor::process_cursor_fetch;
    processMap_["cursor_close"] = &DatabaseServiceProcessor::process_cursor_close;
  }

  virtual ~DatabaseServiceProcessor() {}
};

class DatabaseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DatabaseServiceProcessorFactory(const ::boost::shared_ptr< DatabaseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DatabaseServiceIfFactory > handlerFactory_;
};

class DatabaseServiceMultiface : virtual public DatabaseServiceIf {
 public:
  DatabaseServiceMultiface(std::vector<boost::shared_ptr<DatabaseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DatabaseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DatabaseServiceIf> > ifaces_;
  DatabaseServiceMultiface() {}
  void add(boost::shared_ptr<DatabaseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void connect(ConnectReply& _return, const int32_t protocol_version, const std::string& tenant_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->connect(_return, protocol_version, tenant_id);
    }
    ifaces_[i]->connect(_return, protocol_version, tenant_id);
    return;
  }

  void disconnect(DefaultReply& _return, const Session& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->disconnect(_return, session);
    }
    ifaces_[i]->disconnect(_return, session);
    return;
  }

  void database_create(DefaultReply& _return, const Session& session, const std::string& db_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->database_create(_return, session, db_name);
    }
    ifaces_[i]->database_create(_return, session, db_name);
    return;
  }

  void database_drop(DefaultReply& _return, const Session& session, const std::string& db_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->database_drop(_return, session, db_name);
    }
    ifaces_[i]->database_drop(_return, session, db_name);
    return;
  }

  void database_use(DefaultReply& _return, const Session& session, const std::string& db_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->database_use(_return, session, db_name);
    }
    ifaces_[i]->database_use(_return, session, db_name);
    return;
  }

  void table_create(DefaultReply& _return, const Session& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->table_create(_return, session, table_name);
    }
    ifaces_[i]->table_create(_return, session, table_name);
    return;
  }

  void table_drop(DefaultReply& _return, const Session& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->table_drop(_return, session, table_name);
    }
    ifaces_[i]->table_drop(_return, session, table_name);
    return;
  }

  void table_stat(TableStatReply& _return, const Session& session, const std::string& table_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->table_stat(_return, session, table_name);
    }
    ifaces_[i]->table_stat(_return, session, table_name);
    return;
  }

  void table_put(DefaultReply& _return, const Session& session, const std::string& table_name, const std::string& key, const std::string& value) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->table_put(_return, session, table_name, key, value);
    }
    ifaces_[i]->table_put(_return, session, table_name, key, value);
    return;
  }

  void table_get_by_key(TableGetReply& _return, const Session& session, const std::string& table_name, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->table_get_by_key(_return, session, table_name, key);
    }
    ifaces_[i]->table_get_by_key(_return, session, table_name, key);
    return;
  }

  void table_get_by_order(TableGetReply& _return, const Session& session, const std::string& table_name, const KeyOrder keyOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->table_get_by_order(_return, session, table_name, keyOrder);
    }
    ifaces_[i]->table_get_by_order(_return, session, table_name, keyOrder);
    return;
  }

  void table_del(DefaultReply& _return, const Session& session, const std::string& table_name, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->table_del(_return, session, table_name, key);
    }
    ifaces_[i]->table_del(_return, session, table_name, key);
    return;
  }

  void transaction_begin(DefaultReply& _return, const Session& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transaction_begin(_return, session);
    }
    ifaces_[i]->transaction_begin(_return, session);
    return;
  }

  void transaction_abort(DefaultReply& _return, const Session& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transaction_abort(_return, session);
    }
    ifaces_[i]->transaction_abort(_return, session);
    return;
  }

  void transaction_commit(DefaultReply& _return, const Session& session) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transaction_commit(_return, session);
    }
    ifaces_[i]->transaction_commit(_return, session);
    return;
  }

  void cursor_open_by_key(CursorOpenReply& _return, const Session& session, const std::string& table_name, const CursorDirection::type dir, const std::string& key) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cursor_open_by_key(_return, session, table_name, dir, key);
    }
    ifaces_[i]->cursor_open_by_key(_return, session, table_name, dir, key);
    return;
  }

  void cursor_open_by_order(CursorOpenReply& _return, const Session& session, const std::string& table_name, const CursorDirection::type dir, const KeyOrder keyOrder) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cursor_open_by_order(_return, session, table_name, dir, keyOrder);
    }
    ifaces_[i]->cursor_open_by_order(_return, session, table_name, dir, keyOrder);
    return;
  }

  void cursor_fetch(CursorFetchReply& _return, const Session& session, const CursorHandle cursor_handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cursor_fetch(_return, session, cursor_handle);
    }
    ifaces_[i]->cursor_fetch(_return, session, cursor_handle);
    return;
  }

  void cursor_close(DefaultReply& _return, const Session& session, const CursorHandle cursor_handle) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->cursor_close(_return, session, cursor_handle);
    }
    ifaces_[i]->cursor_close(_return, session, cursor_handle);
    return;
  }

};

}} // namespace

#endif
