// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "LeaderboardService.h"

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TNonblockingServer.h>
#include <thrift/concurrency/PosixThreadFactory.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::concurrency;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::nanolat::leaderboard;

namespace nanolat {
namespace leaderboard {

class LeaderboardServiceHandler : virtual public LeaderboardServiceIf {
 public:
  LeaderboardServiceHandler() {
    // Your initialization goes here
  }

  void connect(ConnectReply& _return, const int32_t protocol_version, const std::string& player_id, const std::string& player_password, const std::string& user_data) {
    // Your implementation goes here
    printf("connect\n");
  }

  void disconnect(DefaultReply& _return, const Session& session) {
    // Your implementation goes here
    printf("disconnect\n");
  }

  void post_score(PostScoreReply& _return, const Session& session, const std::string& category, const Score& score) {
    // Your implementation goes here
    printf("post_score\n");
  }

  void get_scores(GetScoresReply& _return, const Session& session, const std::string& categoy, const std::string& player_id, const int32_t from_rank, const int64_t count) {
    // Your implementation goes here
    printf("get_scores\n");
  }

  void vote_score(DefaultReply& _return, const Session& session, const std::string& voting_player_id, const int64_t score_value, const int64_t score_date_epoch, const int32_t vote_up_down, const std::string& comment) {
    // Your implementation goes here
    printf("vote_score\n");
  }

};

int listen(int port) {
	shared_ptr<LeaderboardServiceHandler> handler(new LeaderboardServiceHandler());
    shared_ptr<TProcessor> processor(new nanolat::leaderboard::LeaderboardServiceProcessor(handler));
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    // using thread pool with maximum 1 thread to handle incoming requests
    shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(1);
    shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
    threadManager->threadFactory(threadFactory);
    threadManager->start();
    TNonblockingServer server(processor, protocolFactory, port, threadManager);
    server.serve();

    return 0;
}

} // leaderboard

} // nanolat
