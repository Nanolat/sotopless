// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.
#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <nanolat/client/SyncClient.h>

void print_usage()
{
	printf("cpp_sync <server address> <port>\n");
}

using namespace ::nanolat::client;

static connection_t * g_conn;

static void show_error_and_exit(int error_code) {
	printf("Error(%d) : %s.\n", error_code, nl_get_error(g_conn).c_str() );
	exit(-1);
}

static void do_connect(const char * address, int port) {
	int rc = nl_connect(address, port, &g_conn);

	if (rc != NL_SUCCESS)
		show_error_and_exit(rc);
}

static void do_disconnect() {
	int rc = nl_disconnect(g_conn);

	if (rc != NL_SUCCESS)
		show_error_and_exit(rc);
}

static void do_create_db(const char * db_name) {
	int rc = nl_database_create(g_conn, db_name);

	if (rc != NL_SUCCESS)
		show_error_and_exit(rc);
}


int main(int argc, const char **argv) {

	if (argc != 3)
	{
		print_usage();
		return -1;
	}

	const char * address = argv[1];
	int port = atoi(argv[2]);

	printf("Running : connect.\n");
	do_connect(address, port);

	printf("Running : create database.\n");
	do_create_db("test_db");

	printf("Running : disconnect.\n");
	do_disconnect();

	return 0;
}

